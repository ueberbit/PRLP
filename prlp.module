<?php

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use \Drupal\Component\Utility\UrlHelper;

/**
 * @file
 * Password Reset Landing Page module.
 */

/**
 * Alters the user password reset landing page.
 *
 * Lets the user enter a new password directly on the landing page
 * and adds a submit handler to save it.
 */
function prlp_form_user_pass_reset_alter(&$form, &$form_state) {
  @list($uid, $timestamp, $hashed_pass, $action) = $form_state['build_info']['args'];
  if ($uid) {
    $form['#user'] = user_load($uid);
    // Do this only if the URI didn't have an 'action' component.
    if (empty($action)) {
      // Inject the username/password change form into the current form.
      $controller = Drupal::entityManager()->getFormController('user', 'default');
      $controller->setEntity($form['#user']);
      $form = $controller->buildForm($form, $form_state);

      // Hide certain fields in $form.
      foreach ($form as $key => &$element) {
        if (in_array($key, prlp_get_hidden_fields())) {
          $element['#access'] = FALSE;
        }
      }

      // Hide certain fields in $form['account']
      foreach ($form['account'] as $key => &$element) {
        if (in_array($key, prlp_get_hidden_account_fields())) {
          $element['#access'] = FALSE;
        }
      }
      // Unset $form['#action'] so that the form doesn't get submitted to the
      // user profile edit page. Instead it gets submitted to self.
      unset($form['#action']);
      // Remove the part of the message that talks about changing password
      // later, since they are changing it right here.
      if (!empty($form['message']['#markup'])) {
        // The following is not working with multilingual sites! So, for now we remove it.
        // Todo: Find ab better solution
        //$form['message']['#markup'] = str_replace('<p>Click on this button to log in to the site and change your password.</p>', '', $form['message']['#markup']);
      }
      if (is_array($form['account']['pass']) && \Drupal::config('prlp.settings')->get('password_required')) {
        $form['account']['pass']['#required'] = TRUE;
      }
      // Set a new button title
      $form['actions']['submit']['#value'] = t('Change password and login');
      // Before sending the user to user profile edit form.
      array_unshift($form['actions']['submit']['#submit'], 'prlp_user_pass_reset_submit');
    }
  }
}

/**
 * Default value of the 'prlp_destination' config varible.
 */
//define('PRLP_DESTINATION_DEFAULT', 'user/%uid/edit');

/**
 * A copy of 'user_pass_reset' function, with a couple of significant changes.
 *
 * It saves the password or username changes. Also, Unlike that function,
 * this one is a form submit handler.
 */
function prlp_user_pass_reset_submit($form, &$form_state) {
  $user = \Drupal::currentUser();
  @list($uid, $timestamp, $hashed_pass, $action) = $form_state['build_info']['args'];

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->isAuthenticated()) {
    // The existing user is already logged in.
    if ($user->id() == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->id()/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array('%other_user' => $user->getUsername(), '%resetting_user' => $reset_link_account->getUsername(), '!logout' => url('user/logout'))));
      } else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    return new RedirectResponse(url('<front>', array('absolute' => TRUE)));
  }
  else {
    // Time out, in seconds, until login URL expires.
    $timeout = \Drupal::config('user.settings')->get('password_reset_timeout');
    $current = REQUEST_TIME;
    $account = user_load($uid);

    // Run $form_state['values']['roles'] through array filter to remove
    // roles that a user doesn't actually have.
    $form_state['values']['roles'] = array_filter($form_state['values']['roles']);

    // Verify that the user exists and is active.
    if ($timestamp <= $current && $account && $account->isActive()) {
      // No time out for first time login.
      if ($account->getLastLoginTime() && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        return new RedirectResponse(url('user/password', array('absolute' => TRUE)));
      }
      elseif ($account->isAuthenticated() && $timestamp >= $account->getLastLoginTime() && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->getPassword(), $timestamp, $account->getLastLoginTime())) {

        $form_state['user'] = $account;

        if (!isset($_SESSION)) {
          $_SESSION = array();
        }

        $controller = Drupal::entityManager()->getFormController('user', 'default');
        $controller->setEntity($form['#user']);
        $controller->submit($form, $form_state);

        // user_login_finalize() also updates the login timestamp of the
        // user, which invalidates further use of the one-time login link.
        user_login_finalize($account);
        watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->getUsername(), '%timestamp' => $timestamp));
        drupal_set_message(t('Your password has been changed successfully. You are now logged in.'));

        $redirect_destination = \Drupal::config('prlp.settings')->get('destination');

        if (empty($redirect_destination)) {
          $form_state['redirect'] = new RedirectResponse(url('<front>'));
        }
        else {
          $redirect_destination = str_replace('%uid', $account->id(), $redirect_destination);
          // Handle URL parameters in destination.
          $redirect_destination = UrlHelper::parse($redirect_destination);
          $form_state['redirect'] = new RedirectResponse(url($redirect_destination['path'], array('absolute' => TRUE)));
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        return new RedirectResponse(url('user/password', array('absolute' => TRUE)));
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      throw new AccessDeniedHttpException();
    }
  }
}

/**
 * Returns an array of fields under $form that should be hidden in PRLP form.
 */
function prlp_get_hidden_fields() {
  $config = \Drupal::config('prlp.settings')->get('hidden_fields');
  $fields = explode("\n", $config);
  foreach ($fields as &$field) {
      $field = trim($field);
  }
  return $fields;
}

/**
 * Returns an array of fields on $form['account'] that should be hidden by PRLP.
 */
function prlp_get_hidden_account_fields() {
  $config = \Drupal::config('prlp.settings')->get('hidden_account_fields');
  $fields = explode("\n", $config);
  foreach ($fields as &$field) {
    $field = trim($field);
  }
  return $fields;
}
